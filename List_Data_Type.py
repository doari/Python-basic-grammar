#List Data Type(리스트 자료형)

# 데이터를 연속적으로 담아 처리하기 위해 사용하는 자료형
# 리스트 대신 배열 혹은 테이블이라고도 한다.
# 리스트는 여러 개의 데이터를 연속적으로 담아 처리하기 위해 사용하는 자료형
# 리스트는 대괄호([])를 사용한다.
# 인덱스는 0부터 시작한다.

# 직접 데이터를 넣어 초기화
a = [1, 2, 3, 4, 5, 6, 7, 8, 9]
print(a)

# 네 번째 원소만 출력
print(a[3])

# 크기가 N이고, 모든 값이 0인 1차원 리스트 초기화
n = 10
a = [0] * n
print(a)

a = [7, 3, 2, 5, 9]
#    0  1  2  3  4
print(a)

a[4] = 4
print(a)

#리스트의 특정한 원소에 접근하는 것을 인덱싱(Indexing)

a = [1, 2, 3, 4, 5, 6, 7, 8, 9]

#여덟 번째 원소만 출력
print(a[7])

#뒤에서 첫번째 원소 출력
print(a[-1])


# 네 번째 원소 값 변경
a[3] =7
print(a)

#연속적인 위치를 갖는 원소들을 가져와야 할 때는 슬라이싱(Slicing)을 이용
#리스트이름[시작인덱스:끝인덱스]
#시작인덱스부터 끝인덱스 전까지를 가져온다
#시작인덱스값은 포함되고 끝인덱스는 포함되지 않는다.

a = [1, 2, 3, 4, 5, 6, 7, 8, 9]

#두 번째 원소부터 네 번째 원소까지
print(a[1:4])


#============================================================

#리스트 컴프리헨션
#리스트를 초기화하는 방법 중 하나

# 0부터 9까지의 수를 포함하는 리스트
array = [i for i in range(10)]
print(array)

# 0부터 19까지의 수 중에서 홀수만 포함하는 리스트
array= [i for i in range(20) if i % 2 == 1]
print(array)

# 1부터 9까지의 수의 제곱 값을 포함하는 리스트
array  = [i * i for i in range(1, 10)]

print(array)

# N X M 크기의 2차원 리스트 초기화
# array = [[0] * m for _ in range(n)]

# N X M 크기의 2차원 리스트 초기화(잘못된 방법)
# array = [[0] * m] * n
# 위코드는 전체 리스트 안에 포함된 각 리스트가 모두 같은 객체로 인식

# N X M 크기의 2차원 리스트 초기화
n = 4
m = 3
array = [[0] * m for _ in range(n)]
print(array)

# 언더바(_): 반복을 수행하되 반복을 위한 변수의 값을 무시하고자

# 1부터 9까지의 자연수를 더하기
summary = 0
for i in range(1, 10):
  summary += i
print(summary)

# "Hello World"를 5번 출력하기
for _ in range(5):
  print("Hello World")

#=========================================================

# 리스트 관련 기타 메서드

# append() : 리스트에 원소 추가
# insert() : 리스트에 원소 삽입
# sort() : 리스트 정렬
# sort(reverse = True) : 리스트 역순 정렬
# reverse() : 리스트 뒤집기
# remove() : 리스트 값 제거

a = [1, 4, 3]
print("기본 리스트: ", a)

# 리스트에 원소 추가
a.append(2)
print("삽입: ",a)

# 오름차순 정렬
a.sort()
print("오름차순 정렬: ", a)

# 내림차순 정렬
a.sort(reverse = True)
print("내림차순 정렬: ", a)

#-------------------------
a = [4, 3, 2, 1]

# 리스트 뒤집기
a.reverse()
print("뒤집기: ", a)

# 특정 인덱스에 해당하는 값 추가
a.insert(2, 3)
print("인덱스 2에 3 추가: ", a)

# 특정 값인 데이터 개수 세기
print("값이 3인 데이터 개수: ", a.count(3))

# 특정 값 데이터 삭제
a.remove(1)
print("값이 1인 데이터 삭제: ", a)


#-----------------------
a = [1, 2, 3, 4, 5, 5, 5]
remove_set = {3, 5} #집합 자료형

# remove_set에 포함되지 않은 값만을 저장
result = [i for i in a if i not in remove_set]
print(result)